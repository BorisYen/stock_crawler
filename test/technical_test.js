var test_common = require('./common_lib') ; // this needs to be the first line of the test file.
var fs = require('fs') ;
var monthly_taiex_crawler = require('../lib/crawlers/monthly_taiex_crawler') ;
var db = require('../dbconnection') ;
var TAIEX = db.TAIEX ;
var tech_functions = require('../lib/stats/technical_cal_functions') ;
var Promise = require('bluebird') ;

var golden_data = JSON.parse(fs.readFileSync('./test/taiex.json', 'utf8'));
var attrs_to_test = ['ma5', 'ma20', 'ma60', 'ma120', 'rsi5', 'rsi10', 'rsi6', 'rsi12', 'k9', 'd9', 'bias5', 'bias10', 'bias20', 'macd_12_26_9',
    'macd_diff9', 'dx14', 'p_di14', 'n_di14', 'psy12', 'psy24'] ;

describe('Use taiex to test technical functions', function(){
    this.timeout(100000) ;

    before(function(){
      return db.sequelize.sync() ;
    }) ;

    // the golden data is actually generated by using mysql workbench with data coming from 2015 and 2016
    // (I have manually compared the golden data with a few other websites.)
    // therefore, when doing the test, we also need to crawl the data for 2015 and 2016.
    it('Crawler data and compare with golden data', function(){
        var results = [] ;
        return monthly_taiex_crawler.crawl({year: 2015}).then(function(records){
            results = results.concat(records)

            return monthly_taiex_crawler.crawl({year: 2016})
        }).then(function(records){
            results = results.concat(records) ;

            tech_functions.updateMaAll(results, [5, 10, 20, 60, 120, 240]) ;
            tech_functions.updateBiasAll(results, [5, 10, 20]) ;
            tech_functions.updateRSIAll(results, [5, 10, 6, 12]) ;
            tech_functions.updateKDAll(results, [9]) ;
            tech_functions.updatePsyAll(results, [12, 24]) ;
            tech_functions.updateDMIAll(results, [14]) ;
            tech_functions.updateMACDAll(results, [12, 26, 9]) ;

            var promise_list = [] ;

            for(var i=0; i<results.length; i++){
                promise_list.push(TAIEX.upsert(results[i]).reflect()) ;
            }

            return Promise.all(promise_list) ;
        }).then(function(){
            return TAIEX.findAll() ;
        }).should.finally.has.resultIn(golden_data, attrs_to_test) ;
    }) ;
})
